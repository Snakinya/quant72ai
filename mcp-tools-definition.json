{
  "get_block_by_hash": {
    "description": "Get a block by hash",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "blockHash": {
            "type": "string",
            "description": "The block hash to look up"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "blockHash"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_block_by_number": {
    "description": "Get a block by number",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number to look up"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "blockNumber"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_latest_block": {
    "description": "Get the latest block",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "is_contract": {
    "description": "Check if an address is a smart contract or an externally owned account (EOA)",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The wallet or contract address to check"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "read_contract": {
    "description": "Read data from a smart contract by calling a view/pure function",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "description": "The address of the smart contract to interact with"
          },
          "abi": {
            "type": "array",
            "description": "The ABI of the smart contract function, as a JSON array"
          },
          "functionName": {
            "type": "string",
            "description": "The name of the function to call on the contract"
          },
          "args": {
            "type": "array",
            "description": "The arguments to pass to the function"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "contractAddress",
          "abi",
          "functionName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "write_contract": {
    "description": "Write data to a smart contract by calling a state-changing function",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "description": "The address of the smart contract to interact with"
          },
          "abi": {
            "type": "array",
            "description": "The ABI of the smart contract function, as a JSON array"
          },
          "functionName": {
            "type": "string",
            "description": "The name of the function to call on the contract"
          },
          "args": {
            "type": "array",
            "description": "The arguments to pass to the function"
          },
          "privateKey": {
            "type": "string",
            "description": "Private key of the sending account. Used only for transaction signing.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "contractAddress",
          "abi",
          "functionName",
          "args"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_chain_info": {
    "description": "Get chain information for a specific network",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_supported_networks": {
    "description": "Get list of supported networks",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "resolve_ens": {
    "description": "Resolve an ENS name to an EVM address (not supported on BSC)",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "ensName": {
            "type": "string",
            "description": "ENS name to resolve (e.g., 'vitalik.eth')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "eth"
          }
        },
        "required": [
          "ensName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_erc20_token_info": {
    "description": "Get ERC20 token information",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The ERC20 token contract address"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_native_balance": {
    "description": "Get native token balance for an address",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address to check balance for"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_erc20_balance": {
    "description": "Get ERC20 token balance for an address",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The ERC20 token contract address"
          },
          "address": {
            "type": "string",
            "description": "The address to check balance for"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_transaction": {
    "description": "Get detailed information about a specific transaction by its hash. Includes sender, recipient, value, data, and more.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "The transaction hash to look up (e.g., '0x1234...')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "txHash"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_transaction_receipt": {
    "description": "Get a transaction receipt by its hash",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "The transaction hash to look up"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "txHash"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "estimate_gas": {
    "description": "Estimate the gas cost for a transaction",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The recipient address"
          },
          "value": {
            "type": "string",
            "description": "The amount of ETH to send in ether (e.g., '0.1')"
          },
          "data": {
            "type": "string",
            "description": "The transaction data as a hex string"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "to"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "transfer_native_token": {
    "description": "Transfer native tokens (BNB, ETH, MATIC, etc.) to an address",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "to": {
            "type": "string",
            "description": "The recipient address or ENS name (e.g., '0x1234...' or 'vitalik.eth')"
          },
          "amount": {
            "type": "string",
            "description": "Amount to send in BNB (or the native token of the network), as a string (e.g., '0.1')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "to",
          "amount"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "approve_token_spending": {
    "description": "Approve another address (like a DeFi protocol or exchange) to spend your ERC20 tokens. This is often required before interacting with DeFi protocols.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the ERC20 token to approve for spending (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC on Ethereum)"
          },
          "spenderAddress": {
            "type": "string",
            "description": "The contract address being approved to spend your tokens (e.g., a DEX or lending protocol)"
          },
          "amount": {
            "type": "string",
            "description": "The amount of tokens to approve in token units, not wei (e.g., '1000' to approve spending 1000 tokens). Use a very large number for unlimited approval."
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "spenderAddress",
          "amount"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "transfer_nft": {
    "description": "Transfer an NFT (ERC721 token) from one address to another. Requires the private key of the current owner for signing the transaction.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key of the NFT owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the specific NFT to transfer (e.g., '1234')"
          },
          "toAddress": {
            "type": "string",
            "description": "The recipient wallet address that will receive the NFT"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId",
          "toAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "transfer_erc1155": {
    "description": "Transfer ERC1155 tokens to another address. ERC1155 is a multi-token standard that can represent both fungible and non-fungible tokens in a single contract.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key of the token owner account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the specific token to transfer (e.g., '1234')"
          },
          "amount": {
            "type": "string",
            "description": "The quantity of tokens to send (e.g., '1' for a single NFT or '10' for 10 fungible tokens)"
          },
          "toAddress": {
            "type": "string",
            "description": "The recipient wallet address that will receive the tokens"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId",
          "amount",
          "toAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "transfer_erc20": {
    "description": "Transfer ERC20 tokens to an address",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key of the sender account in hex format (with or without 0x prefix). SECURITY: This is used only for transaction signing and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          },
          "tokenAddress": {
            "type": "string",
            "description": "The contract address or ENS name of the ERC20 token to transfer (e.g., '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' for USDC or 'uniswap.eth')"
          },
          "toAddress": {
            "type": "string",
            "description": "The recipient address or ENS name that will receive the tokens (e.g., '0x1234...' or 'vitalik.eth')"
          },
          "amount": {
            "type": "string",
            "description": "Amount of tokens to send as a string (e.g., '100' for 100 tokens). This will be adjusted for the token's decimals."
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "toAddress",
          "amount"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_address_from_private_key": {
    "description": "Get the EVM address derived from a private key",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "Private key in hex format (with or without 0x prefix). SECURITY: This is used only for address derivation and is not stored.",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_nft_info": {
    "description": "Get detailed information about a specific NFT (ERC721 token), including collection name, symbol, token URI, and current owner if available.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the specific NFT token to query (e.g., '1234')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "check_nft_ownership": {
    "description": "Check if an address owns a specific NFT",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The contract address or ENS name of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for BAYC or 'boredapeyachtclub.eth')"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the NFT to check (e.g., '1234')"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The wallet address or ENS name to check ownership against (e.g., '0x1234...' or 'vitalik.eth')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_erc1155_token_uri": {
    "description": "Get the metadata URI for an ERC1155 token (multi-token standard used for both fungible and non-fungible tokens). The URI typically points to JSON metadata about the token.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the specific token to query metadata for (e.g., '1234')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_nft_balance": {
    "description": "Get the total number of NFTs owned by an address from a specific collection. This returns the count of NFTs, not individual token IDs.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the NFT collection (e.g., '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' for Bored Ape Yacht Club)"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The wallet address to check the NFT balance for (e.g., '0x1234...')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "get_erc1155_balance": {
    "description": "Get the balance of a specific ERC1155 token ID owned by an address. ERC1155 allows multiple tokens of the same ID, so the balance can be greater than 1.",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The contract address of the ERC1155 token collection (e.g., '0x76BE3b62873462d2142405439777e971754E8E77')"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the specific token to check the balance for (e.g., '1234')"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The wallet address to check the token balance for (e.g., '0x1234...')"
          },
          "network": {
            "type": "string",
            "description": "Network name (e.g. 'bsc', 'opbnb', 'ethereum', 'base', etc.) or chain ID. Supports others main popular networks. Defaults to BSC mainnet.",
            "default": "bsc"
          }
        },
        "required": [
          "tokenAddress",
          "tokenId",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_get_account_balance": {
    "description": "Get the account balance for a Greenfield address",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_get_module_accounts": {
    "description": "Get a list of all module accounts and their information in Greenfield",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_get_all_sps": {
    "description": "Get a list of all storage providers in the Greenfield network",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_create_bucket": {
    "description": "Create a new bucket in Greenfield storage",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_create_file": {
    "description": "Upload a file to a Greenfield bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          },
          "filePath": {
            "type": "string",
            "description": "Absolute path to the file to upload. The file must exist on the machine."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "required": [
          "filePath"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_create_folder": {
    "description": "Create a folder in a Greenfield bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          },
          "folderName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "Optional folder name. Default is 'created-by-bnbchain-mcp'"
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_list_buckets": {
    "description": "List all buckets owned by the account",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "address": {
            "type": "string",
            "description": "The address of the account to list buckets for"
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_list_objects": {
    "description": "List all objects in a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_delete_object": {
    "description": "Delete an object from a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          },
          "objectName": {
            "type": "string",
            "description": "The name of the object to delete"
          }
        },
        "required": [
          "objectName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_delete_bucket": {
    "description": "Delete a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_get_bucket_info": {
    "description": "Get detailed information about a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_get_object_info": {
    "description": "Get detailed information about an object in a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          },
          "objectName": {
            "type": "string",
            "description": "The name of the object to get info for"
          }
        },
        "required": [
          "objectName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  },
  "gnfd_download_object": {
    "description": "Download an object from a bucket",
    "parameters": {
      "jsonSchema": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string",
            "enum": [
              "testnet",
              "mainnet"
            ],
            "default": "testnet",
            "description": "Network name (e.g. 'testnet', 'mainnet'). Defaults to testnet."
          },
          "bucketName": {
            "type": "string",
            "default": "created-by-bnbchain-mcp",
            "description": "The bucket name to use. If not provided, will use default 'created-by-bnbchain-mcp'"
          },
          "objectName": {
            "type": "string",
            "description": "The name of the object to download"
          },
          "targetPath": {
            "type": "string",
            "description": "The path to save the downloaded object"
          },
          "privateKey": {
            "type": "string",
            "default": "0x0dfc32ea670c73899b08cee0bb24811928452dc9c200a4d5068eed32d78046d0",
            "description": "Private key of the account in hex format. SECURITY: This is used only for transaction signing."
          }
        },
        "required": [
          "objectName"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    }
  }
}